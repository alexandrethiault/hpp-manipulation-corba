// Copyright (c) 2019, LAAS-CNRS
// Authors: Joseph Mirabel (joseph.mirabel@laas.fr)
//
// This file is part of hpp-manipulation-corba.
// hpp-manipulation-corba is free software: you can redistribute it
// and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation, either version
// 3 of the License, or (at your option) any later version.
//
// hpp-manipulation-corba is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Lesser Public License for more details.  You should have
// received a copy of the GNU Lesser General Public License along with
// hpp-manipulation-corba. If not, see <http://www.gnu.org/licenses/>.


#ifndef HPP_MANIPULATION_GRAPH_IDL
#define HPP_MANIPULATION_GRAPH_IDL

#include "hpp/corbaserver/manipulation/gcommon.idl"
#include <hpp/common.idl>
#include <hpp/constraints_idl/constraints.idl>
#include <hpp/core_idl/steering_methods.idl>
#include <hpp/core_idl/path_validations.idl>
#include <hpp/core_idl/paths.idl>

module hpp {
  module constraints_idl {
    interface Implicit;
    interface LockedJoint;
    typedef sequence <LockedJoint> LockedJoints;
  };
  module core_idl {
    interface SteeringMethod;
    interface PathValidation;
  };
  module manipulation_idl {
    module graph_idl {
      typedef unsigned long long size_t;
      interface State;
      typedef sequence<State> States;
      interface Edge;
      typedef sequence<Edge> Edges;
      interface Graph;

      interface GraphComponent {
        string name () raises (Error);
        size_t id () raises (Error);

        Graph parentGraph () raises (Error);

        void addNumericalConstraint (in constraints_idl::Implicit nm) raises (Error);
        void addNumericalCost (in constraints_idl::Implicit nm) raises (Error);

        constraints_idl::Implicits numericalConstraints () raises (Error);

        constraints_idl::Implicits numericalCosts () raises (Error);

        void resetNumericalConstraints () raises (Error);
      }; // interface GraphComponent

      interface StateSelector
      {
        string name () raises (Error);

        Graph parentGraph () raises (Error);

        States getStates () raises (Error);
      }; // interface StateSelector

      interface Graph : GraphComponent
      {
        StateSelector getStateSelector () raises (Error);
        //-> stateSelector
        GraphComponent get (in size_t id) raises (Error);
        size_t nbComponents () raises (Error);
        void initialize () raises (Error);

        State getState (in floatSeq config) raises (Error);
        Edges getEdges (in State from, in State to) raises (Error);
      }; // interface Graph

      interface State : GraphComponent
      {
        boolean contains (in floatSeq config) raises (Error);
        Edge linkTo (in string name, in State to, in size_type weight) raises (Error);

        Edges neighborEdges () raises (Error);
        Edges hiddenNeighbors () raises (Error);

        core_idl::ConstraintSet configConstraint () raises (Error);
      }; // interface State

      interface Edge : GraphComponent
      {
        State stateFrom () raises (Error);
        State stateTo () raises (Error);
        State getState () raises (Error);
        //-> state
        void setState (in State st) raises (Error);
        //-> state
        intSeqSeq getRelativeMotion () raises (Error);
        //* return corbaServer::matrixToIntSeqSeq(getT()->relativeMotion().template cast<CORBA::Long>());
        floatSeqSeq getSecurityMargins () raises (Error);
        //-> securityMargins
        void setSecurityMarginForPair(in size_type row, in size_type col, in value_type margin) raises (Error);
        //-> securityMarginForPair

        boolean generateTargetConfig(in floatSeq qStart, inout floatSeq q)
          raises(Error);

        core_idl::SteeringMethod getSteeringMethod () raises (Error);
        //-> steeringMethod
        core_idl::PathValidation getPathValidation () raises (Error);
        //-> pathValidation

        /// \deprecated renamed to \ref targetConstraint
        core_idl::ConstraintSet configConstraint () raises (Error);
        //-> targetConstraint

        core_idl::ConstraintSet targetConstraint () raises (Error);

        core_idl::ConstraintSet pathConstraint () raises (Error);

        core_idl::Path build (in floatSeq q1, in floatSeq q2) raises (Error);
        //*hpp::core::vector_t _q1 = hpp::corbaServer::floatSeqToVector (q1);
        //*hpp::core::vector_t _q2 = hpp::corbaServer::floatSeqToVector (q2);
        //*hpp::core::PathPtr_t path;
        //*bool res = getT()->build (path, _q1, _q2);
        //*if (!res) {
        //*  std::ostringstream oss;
        //*  oss << "Failed building a path between _q1=";
        //*  oss << hpp::pinocchio::displayConfig(_q1);
        //*  oss << " and _q2=";
        //*  oss << hpp::pinocchio::displayConfig(_q2);
        //*  throw(std::runtime_error(oss.str())); 
        //*}
        //*return ::hpp::corbaServer::makeServantDownCast<hpp::core_impl::Path,hpp::core_impl::Path>(server_, path)._retn();

      }; // interface Edge

      interface LevelSetEdge : Edge
      {
        constraints_idl::Implicits paramConstraints() raises(Error);
        constraints_idl::Implicits conditionConstraints() raises(Error);
        boolean generateTargetConfigOnLeaf(in floatSeq qStart,
                                           in floatSeq qLeaf,
                                           inout floatSeq q) raises(Error);
      }; // interface LevelSetEdge

      interface Validation
      {
        string str () raises (Error);

        boolean hasErrors () raises (Error);

        boolean hasWarnings () raises (Error);

        boolean validate (in GraphComponent comp) raises (Error);
      }; // interface Validation
    }; // module graph
  }; // module manipulation
}; // module hpp

//* #include <hpp/constraints_idl/constraints.hh>
//* #include <hpp/core_idl/steering_methods.hh>
//* #include <hpp/core_idl/path_validations.hh>
//* #include <hpp/manipulation/graph/edge.hh>
//* #include <hpp/manipulation/graph/graph.hh>
//* #include <hpp/manipulation/graph/state.hh>
//* #include <hpp/manipulation/graph/state-selector.hh>
//* #include <hpp/manipulation/graph/validation.hh>
//* #include <hpp/pinocchio/configuration.hh>

#endif // HPP_MANIPULATION_STEERING_METHODS_IDL
