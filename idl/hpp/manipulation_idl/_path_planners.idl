// Copyright (C) 2020 by Joseph Mirabel, LAAS-CNRS.
//
// This file is part of the hpp-manipulation-planner.
//
// This software is provided "as is" without warranty of any kind,
// either expressed or implied, including but not limited to the
// implied warranties of fitness for a particular purpose.
//
// See the COPYING file for more information.

#ifndef HPP_MANIPULATION_CORBA_PATH_PLANNERS_IDL
#define HPP_MANIPULATION_CORBA_PATH_PLANNERS_IDL
#include <hpp/common.idl>

#include <hpp/core_idl/path_planners.idl>
#include <hpp/manipulation_idl/_problem.idl>
#include <hpp/manipulation_idl/_graph.idl>

module hpp
{
  module core_idl {
    interface PathPlanner;
  }; // module core

  module manipulation_idl {
    interface Roadmap : core_idl::Roadmap {
      void constraintGraph (in graph_idl::Graph graph) raises (Error);
    }; // interface Roadmap

    module pathPlanner_idl {
      interface IkSolverInitialization
      {
      }; // interface IkSolverInitialization

      interface EndEffectorTrajectory : core_idl::PathPlanner
      {
        long getNRandomConfig (         ) raises (Error);
        //-> nRandomConfig
        void setNRandomConfig (in long n) raises (Error);
        //-> nRandomConfig

        long getNDiscreteSteps (         ) raises (Error);
        //-> nDiscreteSteps
        void setNDiscreteSteps (in long n) raises (Error);
        //-> nDiscreteSteps

        boolean getCheckFeasibilityOnly (            ) raises (Error);
        //-> checkFeasibilityOnly
        void    setCheckFeasibilityOnly (in boolean n) raises (Error);
        //-> checkFeasibilityOnly

        void setIkSolverInitialization (in IkSolverInitialization solver);
        //-> ikSolverInitialization
      }; // interface EndEffectorTrajectory


      module statesPathFinder_idl {
      interface StatesPathFinder
      {

        floatSeqSeq compute(in floatSeq q1, in floatSeq q2);
        //*hpp::core::vector_t _q1 = hpp::corbaServer::floatSeqToVector (q1);
        //*hpp::core::vector_t _q2 = hpp::corbaServer::floatSeqToVector (q2);
        //*std::vector<boost::shared_ptr<Eigen::Matrix<double, -1, 1> > > res = getT()->compute (_q1, _q2);
        //*int s = res.size();
        //*int n = res[0]->rows(); // cols() == 1
        //*Eigen::Matrix<double, -1, -1> matrix;
        //*matrix.resize(s,n);
        //*for (int i=0; i<s; i++)
        //*  matrix.row(i) = res[i]->col(0);
        //*hpp::floatSeqSeq* __return__ = hpp::corbaServer::matrixToFloatSeqSeq (matrix);
        //*return __return__;

        Names_t getConstraintNamesFromSolverAtWaypoint(in long jslv);
        //-> constraintNamesFromSolverAtWaypoint
        string displayConfigsSolved();
        //-> displayConfigsSolved
        floatSeq configSolved(in long wp);
        //-> configSolved
        Names_t getLastBuiltTransitions();
        //-> lastBuiltTransitions
        boolean buildOptimizationProblem(in Names_t transitions);
        //-> buildOptimizationProblemFromNames
        void initWPRandom(in long wp);
        //-> initWPRandom
        void initWPNear(in long wp);
        //-> initWPNear
        void initWP(in long wp, in floatSeq q);
        //-> initWP
        long solveStep(in long wp);
        //-> solveStep

      }; // interface StatesPathFinder

      }; // module statesPathFinder_idl
    }; // module pathPlanner_idl
  }; // module manipulation_idl
}; // module hpp

//* #include <hpp/manipulation/path-planner/states-path-finder.hh>
//* #include <hpp/manipulation/path-planner/end-effector-trajectory.hh>
//* #include <hpp/core_idl/paths.hh>
//* #include <hpp/core_idl/path_planners.hh>
//* #include <hpp/manipulation_idl/_graph-fwd.hh>
//* #include <hpp/manipulation/roadmap.hh>

#endif // HPP_MANIPULATION_CORBA_PATH_PLANNERS_IDL
